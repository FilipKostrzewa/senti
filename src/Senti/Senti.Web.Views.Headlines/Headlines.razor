@using Microsoft.Extensions.Configuration
@using Radzen
@using Radzen.Blazor
@using Senti.Shared.Models.News
@using System.Collections
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Senti.Web.Shared

@inject IConfiguration Configuration

@page "/headlines"

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-p-sm-12">
    <RadzenLabel Text="Select stock" Component="DropDownEnums" />

    <RadzenDropDown 

    TValue="string"
    Data="@(stocks)" 
    Value="@stock"
    Change="@(async x => await OnStockChange(x))"

    AllowFiltering="true" 
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
    Style="width: 100%; max-width: 400px;" 
    Name="Stock">

    </RadzenDropDown>
</RadzenStack>

<RadzenDataGrid 
    Data="@articles" 
    GridLines="@GridLines" 
    AllowPaging="true" 
    AllowSorting="true"
    
    AllowColumnResize="true">
    
    <Columns>
        <RadzenDataGridColumn Width="200px" Property="PublishDate" Title="Publish Date" />
        <RadzenDataGridColumn Property="Title" Title="Title" />
        <RadzenDataGridColumn Width="100px" Property="SentimentPositive" Title="Positive" />
        <RadzenDataGridColumn Width="100px" Property="SentimentNeutral" Title="Neutral" />
        <RadzenDataGridColumn Width="100px" Property="SentimentNegative" Title="Negative" />
    </Columns>
</RadzenDataGrid>


@code {

    Radzen.DataGridGridLines GridLines = Radzen.DataGridGridLines.Default;
    IEnumerable<Article> articles;
    string stock = "AAPL";
    List<string> stocks = new List<string> { "AAPL", "MSFT", "GOOGL", "NVDA", "AMZN", "TSLA", "MCD" };

    public async Task OnStockChange(object args)
    {
        stock = args.ToString();

        var url = Configuration[WebSettings.GetArticlesUrl] + stock;
        var httpClient = new HttpClient();
        var response = await httpClient.GetStringAsync(url);

        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };

        var result = JsonSerializer.Deserialize<List<Article>>(response, options);
        articles = result.OrderByDescending(x => x.PublishDate);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        articles = new List<Article>();

        await OnStockChange(stock);
    }
}

